{"version":3,"sources":["components/Loader/Loader.jsx","api/base-api.js","types.js","api/posts.js","components/PostItem/PostItem.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","BASE_URL","PropTypes","shape","id","number","isRequired","userId","title","string","body","getPostComments","postId","fetch","then","response","json","catch","error","PostItem","post","changeSidebarVisibility","setPostComments","changeCommentsLoaded","type","onClick","a","PostsList","posts","map","key","NewCommentForm","useState","name","setName","email","setEmail","setBody","onSubmit","event","comment","preventDefault","method","headers","JSON","stringify","placeholder","required","value","onChange","target","PostDetails","postComments","postBody","isCommentsLoaded","commentsVisibility","setCommentsVisibility","length","cn","postDetails__list","hidden","commentId","defaultProps","App","postsFromServer","setPostsFromServer","filteredPosts","setFilteredPosts","selectedPost","selectPost","sidebarVisibility","setSidebarVisibility","isLoaded","setLoading","useEffect","filter","app__sidebar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9e454b9.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import PropTypes from 'prop-types';\n\nexport const PostType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n});\n","import { BASE_URL } from './base-api';\n\nexport const getPosts = () => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .catch(error => error);\n\nexport const getPostComments = postId => (\n  fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json())\n    .catch(error => error)\n);\n\nexport const addNewComment = comment => (\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  })\n);\n\nexport const deleteComment = commentId => (\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PostType } from '../../types';\nimport { getPostComments } from '../../api/posts';\n\nfunction PostItem({\n  post,\n  postId,\n  changeSidebarVisibility,\n  setPostComments,\n  changeCommentsLoaded,\n}) {\n  const { userId, title, id } = post;\n\n  return (\n    <>\n      <div>\n        <b>\n          {`[User # ${userId}]: `}\n        </b>\n        { title }\n      </div>\n      <button\n        type=\"button\"\n        className=\"postsList__button button\"\n        onClick={async() => {\n          changeSidebarVisibility(id);\n          changeCommentsLoaded(false);\n\n          await getPostComments(id)\n            .then(setPostComments);\n\n          changeCommentsLoaded(true);\n        }}\n      >\n        { postId === id ? 'Close' : 'Open' }\n      </button>\n    </>\n  );\n}\n\nexport default PostItem;\n\nPostItem.propTypes = {\n  post: PostType.isRequired,\n  postId: PropTypes.number.isRequired,\n  changeSidebarVisibility: PropTypes.func.isRequired,\n  setPostComments: PropTypes.func.isRequired,\n  changeCommentsLoaded: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostItem from '../PostItem/PostItem';\nimport { PostType } from '../../types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  postId,\n  changeSidebarVisibility,\n  setPostComments,\n  changeCommentsLoaded,\n}) => (\n  <div className=\"postsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"postsList__list\">\n      {\n        posts.map(post => (\n          <li\n            className=\"postsList__item\"\n            key={post.id}\n          >\n            <PostItem\n              post={post}\n              postId={postId}\n              changeSidebarVisibility={changeSidebarVisibility}\n              setPostComments={setPostComments}\n              changeCommentsLoaded={changeCommentsLoaded}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PostType).isRequired,\n  postId: PropTypes.number.isRequired,\n  changeSidebarVisibility: PropTypes.func.isRequired,\n  setPostComments: PropTypes.func.isRequired,\n  changeCommentsLoaded: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addNewComment, getPostComments } from '../../api/posts';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, setPostComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form\n      className=\"newCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        addNewComment({\n          name,\n          postId,\n          email,\n          body,\n        })\n          .then(response => (\n            getPostComments(postId)\n              .then(setPostComments)\n          ));\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"newCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"newCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"newCommentForm__input newCommentForm__textarea\"\n          required\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"newCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setPostComments: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../Loader';\nimport { deleteComment, getPostComments } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  postComments,\n  postId,\n  postBody,\n  setPostComments,\n  isCommentsLoaded,\n}) => {\n  const [commentsVisibility, setCommentsVisibility] = useState(false);\n\n  const changeCommentsVisibility = () => {\n    setCommentsVisibility(!commentsVisibility);\n  };\n\n  return (\n    <div className=\"postDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"postDetails__post\">\n        <p>{ postBody }</p>\n      </section>\n\n      <section className=\"postDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button postDetails__button\"\n          onClick={changeCommentsVisibility}\n        >\n          {\n            commentsVisibility\n              ? `Show ${postComments.length} comment(s)`\n              : `Hide ${postComments.length} comment(s)`\n          }\n        </button>\n\n        <ul\n          className={cn({\n            postDetails__list: true,\n            hidden: commentsVisibility,\n          })}\n        >\n          {\n            isCommentsLoaded ? (\n              postComments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"postDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"postDetails__remove-button button\"\n                    onClick={() => (\n                      deleteComment(comment.id)\n                        .then(response => (\n                          getPostComments(postId)\n                            .then(setPostComments)\n                        ))\n                    )}\n                  >\n                    X\n                  </button>\n                  <p>\n                    { comment.body }\n                  </p>\n                </li>\n              ))\n            ) : (\n              <Loader />\n            )\n          }\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"postDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            setPostComments={setPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.defaultProps = {\n  postBody: '',\n};\n\nPostDetails.propTypes = {\n  postComments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    postId: PropTypes.number.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  postId: PropTypes.number.isRequired,\n  postBody: PropTypes.string,\n  setPostComments: PropTypes.func.isRequired,\n  isCommentsLoaded: PropTypes.bool.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { Loader } from './components/Loader';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [postsFromServer, setPostsFromServer] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [selectedPost, selectPost] = useState(0);\n  const [postComments, setPostComments] = useState([]);\n  const [sidebarVisibility, setSidebarVisibility] = useState(false);\n  const [isLoaded, setLoading] = useState(false);\n  const [isCommentsLoaded, changeCommentsLoaded] = useState(false);\n\n  useEffect(() => {\n    (async function() {\n      setLoading(false);\n\n      await getPosts()\n        .then((posts) => {\n          setPostsFromServer(posts);\n          setFilteredPosts(posts);\n        });\n\n      setLoading(true);\n    })();\n  }, []);\n\n  const changeSidebarVisibility = (id) => {\n    if (selectedPost !== id) {\n      selectPost(id);\n      setSidebarVisibility(true);\n    } else {\n      selectPost(0);\n      setSidebarVisibility(false);\n    }\n  };\n\n  const filterByUser = (event) => {\n    const value = +event.target.value;\n\n    if (value === 0) {\n      setFilteredPosts(postsFromServer);\n    } else {\n      setFilteredPosts(\n        postsFromServer.filter(post => post.userId === value),\n      );\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"app__user-selector\"\n            onChange={filterByUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"app__main\">\n        <div className=\"app__content\">\n          {\n            isLoaded ? (\n              <PostsList\n                posts={filteredPosts}\n                postId={selectedPost}\n                changeSidebarVisibility={changeSidebarVisibility}\n                setPostComments={setPostComments}\n                isCommentsLoaded={isCommentsLoaded}\n                changeCommentsLoaded={changeCommentsLoaded}\n              />\n            ) : (\n              <Loader />\n            )\n          }\n        </div>\n\n        <div className={cn({\n          app__sidebar: true,\n          hidden: !sidebarVisibility,\n        })}\n        >\n          <PostDetails\n            postComments={postComments}\n            postId={selectedPost}\n            postBody={filteredPosts[selectedPost]?.body}\n            setPostComments={setPostComments}\n            isCommentsLoaded={isCommentsLoaded}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}